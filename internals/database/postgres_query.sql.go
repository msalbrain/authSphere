// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: postgres_query.sql

package database

import (
	"context"
	"database/sql"
)

const createPAuthor = `-- name: CreatePAuthor :one
INSERT INTO users (
  name, bio
) VALUES (
   $1, $2
)
RETURNING id, name, email, hashed_password, bio, auth_token, created_at, updated_at
`

type CreatePAuthorParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreatePAuthor(ctx context.Context, arg CreatePAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createPAuthor, arg.Name, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePAuthor = `-- name: DeletePAuthor :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeletePAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePAuthor, id)
	return err
}

const getPAuthor = `-- name: GetPAuthor :one
SELECT id, name, email, hashed_password, bio, auth_token, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetPAuthor(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getPAuthor, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPJoin = `-- name: GetPJoin :one
SELECT
  users.id AS user_id,
  users.name,
  users.email,
  users.bio,
  user_sessions.session_token,
  user_sessions.login_time,
  user_sessions.logout_time,
  user_sessions.ip_address,
  user_sessions.user_agent,
  user_sessions.is_active
FROM
  users
JOIN
  user_sessions ON users.id = user_sessions.user_id
`

type GetPJoinRow struct {
	UserID       int32
	Name         string
	Email        sql.NullString
	Bio          sql.NullString
	SessionToken string
	LoginTime    int32
	LogoutTime   sql.NullInt32
	IpAddress    sql.NullString
	UserAgent    sql.NullString
	IsActive     bool
}

func (q *Queries) GetPJoin(ctx context.Context) (GetPJoinRow, error) {
	row := q.db.QueryRowContext(ctx, getPJoin)
	var i GetPJoinRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.SessionToken,
		&i.LoginTime,
		&i.LogoutTime,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
	)
	return i, err
}

const listPAuthors = `-- name: ListPAuthors :many
SELECT id, name, email, hashed_password, bio, auth_token, created_at, updated_at FROM users
ORDER BY name
`

func (q *Queries) ListPAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listPAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.HashedPassword,
			&i.Bio,
			&i.AuthToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
