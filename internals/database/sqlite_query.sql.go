// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: sqlite_query.sql

package database

import (
	"context"
	"database/sql"
)

const createSAuthor = `-- name: CreateSAuthor :one
INSERT INTO users (
  name, bio
) VALUES (
  ?, ?
)
RETURNING id, name, email, hashed_password, bio, auth_token, created_at, updated_at
`

type CreateSAuthorParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateSAuthor(ctx context.Context, arg CreateSAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createSAuthor, arg.Name, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSAuthor = `-- name: DeleteSAuthor :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteSAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSAuthor, id)
	return err
}

const getSAuthor = `-- name: GetSAuthor :one
SELECT id, name, email, hashed_password, bio, auth_token, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetSAuthor(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getSAuthor, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSJoin = `-- name: GetSJoin :one
SELECT
  users.id AS user_id,
  users.name,
  users.email,
  users.bio,
  user_sessions.session_token,
  user_sessions.login_time,
  user_sessions.logout_time,
  user_sessions.ip_address,
  user_sessions.user_agent,
  user_sessions.is_active
FROM
  users
JOIN
  user_sessions ON users.id = user_sessions.user_id
`

type GetSJoinRow struct {
	UserID       int64
	Name         string
	Email        sql.NullString
	Bio          sql.NullString
	SessionToken string
	LoginTime    int64
	LogoutTime   sql.NullInt64
	IpAddress    sql.NullString
	UserAgent    sql.NullString
	IsActive     bool
}

func (q *Queries) GetSJoin(ctx context.Context) (GetSJoinRow, error) {
	row := q.db.QueryRowContext(ctx, getSJoin)
	var i GetSJoinRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.SessionToken,
		&i.LoginTime,
		&i.LogoutTime,
		&i.IpAddress,
		&i.UserAgent,
		&i.IsActive,
	)
	return i, err
}

const listSAuthors = `-- name: ListSAuthors :many
SELECT id, name, email, hashed_password, bio, auth_token, created_at, updated_at FROM users
ORDER BY name
`

func (q *Queries) ListSAuthors(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listSAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.HashedPassword,
			&i.Bio,
			&i.AuthToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
