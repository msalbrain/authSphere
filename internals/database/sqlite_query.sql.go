// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: sqlite_query.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, hashed_password, bio, auth_token, created_at, updated_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, email, hashed_password, bio, refresh_token, auth_token, created_at, updated_at
`

type CreateUserParams struct {
	Name           string
	Email          sql.NullString
	HashedPassword sql.NullString
	Bio            sql.NullString
	AuthToken      string
	CreatedAt      int64
	UpdatedAt      sql.NullInt64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
		arg.Bio,
		arg.AuthToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.RefreshToken,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, hashed_password, bio, refresh_token, auth_token, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.RefreshToken,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, hashed_password, bio, refresh_token, auth_token, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Bio,
		&i.RefreshToken,
		&i.AuthToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, hashed_password, bio, refresh_token, auth_token, created_at, updated_at FROM users
LIMIT ?
OFFSET ?
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.HashedPassword,
			&i.Bio,
			&i.RefreshToken,
			&i.AuthToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
